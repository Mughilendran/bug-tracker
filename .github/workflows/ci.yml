name: CI

on:
  push:
    branches: 
      - main
  workflow_dispatch:

jobs:
  unit-tests-backend:
    runs-on: ubuntu-latest

    outputs:
      coverage: ${{ steps.backend-tests.outputs.report }}
      

    steps:
      - uses: actions/checkout@v4

      - name: Set up go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache-dependency-path: bugtracker-backend/go.sum

      - name: Install go-junit reporter
        run: |
          go install github.com/jstemmer/go-junit-report/v2@latest

      - name: Run backend unit tests
        working-directory: ./bugtracker-backend
        run: |
          go test -json -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -func=coverage.out > coverage.txt
          go test -v ./... 2>&1 | go-junit-report > test-results.xml
        
      - name: Append coverage summary
        id: backend-tests
        run: |
          echo "Coverage details:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat bugtracker-backend/coverage.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

          echo "report<<EOF" >> $GITHUB_OUTPUT
          cat bugtracker-backend/coverage.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Debug coverage files
        run: |
            ls -la bugtracker-backend
            cat bugtracker-backend/coverage.txt || echo "coverage.txt not found"


      - name: Publish backend test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: backend-test-results
          path: bugtracker-backend/test-results.xml
          reporter: jest-junit


  unit-tests-frontend:
    runs-on: ubuntu-latest
    needs: unit-tests-backend

    outputs:
      coverage: ${{ steps.frontend-tests.outputs.report }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: bugtracker-frontend/package-lock.json

      - name: Run frontend unit tests
        working-directory: ./bugtracker-frontend
        run: |
          npm ci
          npm test | tee fullOutput.txt

      - name: Append frontend coverage summary
        id: frontend-tests
        run: |
          echo "Coverage front details:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat bugtracker-frontend/fullOutput.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

          echo "report<<EOF" >> $GITHUB_OUTPUT
          cat bugtracker-frontend/fullOutput.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Publish frontend test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: frontend-test-results
          path: bugtracker-frontend/test-results.xml
          reporter: jest-junit

  create-coverage-comments:
    if: github.event_name == 'pull_request'
    needs: 
      - unit-tests-backend
      - unit-tests-frontend
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps: 
      - name: Create coverage comment
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## Backend Coverage Summary
            ```
            ${{ needs.unit-tests-backend.outputs.coverage }}
            ```
      - name: Create coverage comment frontend
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## Frontend Coverage Summary
            ```
            ${{ needs.unit-tests-frontend.outputs.coverage }}
            ```
  api-integration-tests:
    runs-on: ubuntu-latest
    needs: [unit-tests-backend, unit-tests-frontend]

    steps:
      - uses: actions/checkout@v4

      - name: launch application
        run: |
          docker compose up -d --build
          npx wait-port http://localhost:8080/api/health -t 30000
      
      - name: Run API integration tests
        working-directory: ./tests-api
        run: |
          npm ci
          npx playwright test

      - name: Shutdown application
        if: always()
        run: |
          docker compose down

      - name: Publish API test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: api-test-results
          path: ./tests-api/test-results/*.xml
          reporter: jest-junit
        
      - name: Upload Playwright Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-test-playwright-results
          path: ./tests-api/playwright-report
          retention-days: 30

  e2e-tests:
    if: needs.api-integration-tests.result == 'success'
    runs-on: ubuntu-latest
    needs: [unit-tests-backend, unit-tests-frontend, api-integration-tests]
    steps:
      - uses: actions/checkout@v4

      - name: launch application
        run: |
          docker compose up -d --build
          npx wait-port http://localhost:8080/api/health -t 30000
          npx wait-port http://localhost:3000 -t 30000

      - name: Run E2E tests
        working-directory: ./tests-e2e
        env:
          CI: "1"
        run: |
          npm ci
          npx playwright install
          npx playwright test

      - name: Shutdown application
        if: always()
        run: |
          docker compose down

      - name: Publish E2E test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: ./tests-e2e/test-results/results.xml

      - name: Upload Playwright Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-playwright-results
          path: ./tests-e2e/playwright-report
          retention-days: 30